# -*- coding: utf-8 -*-
"""Association_rules.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qMfZrMCwxM3ySPY24hocJNPOj43oHspb
"""

# import libraries
import csv
from itertools import combinations

# reading data from retail file
def data(file_loc=''):
    transaction = dict()
    with open(file_loc) as f:
        filedata = csv.reader(f, delimiter=',')
        count = 0
        for line in filedata:
            count += 1
            transaction[count] = list(set(line))
    return transaction

# print retail dataset
data('/content/retail_dataset - Copy.csv')

# calculate the count of each item
def frequency(items_list, transaction, check=False):
    items_counts = dict()
    for i in items_list:
        temp_i = {i}
        if check:
            temp_i = set(i)
        for j in transaction.items():
            if temp_i.issubset(set(j[1])):
                if i in items_counts:
                    items_counts[i] += 1
                else:
                    items_counts[i] = 1
    return items_counts

# print count for each item in dataset
transactions=data('/content/retail_dataset - Copy.csv')
items_lst = set()
for i in transactions.values():
   for j in i:
      items_lst.add(j)
    
store_item_lst = list(items_lst)[:]
frequency(items_lst, transactions, check=False)

# calculate support of each item 
# support = frequency / N
def support(items_counts, transaction):
    support = dict()
    total_transactions = len(transaction)
    for i in items_counts:
        support[i] = items_counts[i]/total_transactions
    return support

items_counts = frequency(items_lst, transactions)
transactions = data('/content/retail_dataset - Copy.csv')
support(items_counts, transactions)

# rules
def association_rules(items_grater_then_min_support):
    rules = []
    dict_rules = {}# dictionary of rules
    for i in items_grater_then_min_support:
        dict_rules = {}
        if type(i) != type(str()):
            i = list(i)
            temp_i = i[:]
            for j in range(len(i)):
                k = temp_i[j]
                del temp_i[j]
                dict_rules[k] = temp_i
                temp_i = i[:]
        rules.append(dict_rules)
    temp = []
    for i in rules:
        for j in i.items():
            if type(j[1]) != type(str()):
                temp.append({tuple(j[1])[0]: j[0]})
            else:
                temp.append({j[1]: j[0]})
    rules.extend(temp)
    return rules

# calculate confidence of each item 
#conf = support(a->b)/support(a)
def confidence(associations, d, min_confidence):
    ans = {}
    for i in associations:
        for j in i.items():
            if type(j[0]) == type(str()):
                left = {j[0]}
            else:
                left = set(j[0])
            if type(j[1]) == type(str()):
                right = {j[1]}
            else:
                right = set(j[1])
            for k in d:
                if type(k) != type(str()):
                    if left.union(right) - set(k) == set():
                        up = d[k]
                    if len(right) == len(set(k)) and right - set(k) == set():
                            down = d[k]
                else:
                    if len(right) >= len({k}):
                        if right - {k} == set():
                            down = d[k]
                    elif len(right) <= len({k}):
                        if {k} - right == set():
                            down = d[k]
            if up/down >= min_confidence:
                ans[tuple(left)[0]] = right, up/down, up, down
    print(ans)

def Run(min_support, min_confidence, file_loc):
    
    transactions = data(file_loc)
    number_of_trans = [len(i) for i in transactions.values()]
    print(number_of_trans)
    print("===========================")
    items_lst = set()
    itemcount_track = list()    
    
    for i in transactions.values():
        for j in i:
            items_lst.add(j)    #Set->{'Bread', 'Meat', 'Cheese', 'Milk', 'Eggs', 'Diaper', 'Bagel', 'Pencil', 'Wine'}

    store_item_lst = list(items_lst)[:] #list->['Bread', 'Meat', 'Cheese', 'Milk', 'Eggs', 'Diaper', 'Bagel', 'Pencil', 'Wine']
    gms = list() #items_grater_than_min_support / list contain all items that greater than min sup
    items_counts = frequency(items_lst, transactions) #set-->{'Bread': 159, 'Meat': 150, 'Cheese': 158, 'Milk': 158, 'Eggs': 138, 'Diaper': 128, 'Bagel': 134, 'Pencil': 114, 'Wine': 138}
    itemcount_track.append(items_counts) #list-->[{'Bread': 159, 'Meat': 150, 'Cheese': 158, 'Milk': 158, 'Eggs': 138, 'Diaper': 128, 'Bagel': 134, 'Pencil': 114, 'Wine': 138}]
    gms.append({j[0]:j[1] for j in support(items_counts, transactions).items() if j[1]>min_support})
    
    for i in range(2, max(number_of_trans)+1):
        item_list = combinations(items_lst, i)
        items_counts = frequency(item_list, transactions, check=True)
        itemcount_track.append(items_counts)
        if list({j[0]:j[1] for j in support(items_counts, transactions).items() if j[1]>min_support}.keys()) != []:
            gms.append({j[0]:j[1] for j in support(items_counts, transactions).items() if j[1]>min_support})
    print(gms)   
    print("==================")
    print(itemcount_track) #list
    print("====================")  
    d = {}
    {d.update(i) for i in itemcount_track}
    print(d) # set
    print("==============================")
    associations = association_rules(gms[len(gms)-1])
    print(associations)
    print("=============================")
    associations_grater_than_confidene = confidence(associations, d, min_confidence)
    print(associations_grater_than_confidene)
    print("================================")

def Run(min_support, min_confidence, file_loc):
    
    transactions = data('/content/retail_dataset - Copy.csv')
    number_of_trans = [len(i) for i in transactions.values()]
    #number_of_trans=315
    items_lst = set()
    
    itemcount_track = list()    
    
    for i in transactions.values():
        for j in i:
            items_lst.add(j)
    
    store_item_lst = list(items_lst)[:]
    gms = list()
    items_counts = frequency(items_lst, transactions)
    itemcount_track.append(items_counts)
    gms.append({j[0]:j[1] for j in support(items_counts, transactions).items() if j[1]>min_support})
    
    for i in range(2, max(number_of_trans)+1):
        item_list = combinations(items_lst, i)
        items_counts = frequency(item_list, transactions, check=True)
        itemcount_track.append(items_counts)
        if list({j[0]:j[1] for j in support(items_counts, transactions).items() if j[1]>min_support}.keys()) != []:
            gms.append({j[0]:j[1] for j in support(items_counts, transactions).items() if j[1]>min_support})
        
    d = {}
    {d.update(i) for i in itemcount_track}
    associations = association_rules(gms[len(gms)-1])
    associations_grater_than_confidene = confidence(associations, d, min_confidence)
    
    

Run(0.01, 0.5, '/content/retail_dataset.csv')